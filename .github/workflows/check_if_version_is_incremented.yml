name: "Check if version is incremented"

on:
  workflow_call:
    inputs:
      source_dir:
        description: "Directory where source code lives"
        required: true
        type: string
      packagejson_dir:
        description: "Package.json location"
        type: string
        default: "."
      main_branch:
        description: "Main branch to compare PR to"
        type: string
        default: "main"
    outputs:
      new_version:
        description: "New version of package, possibly empty"
        value: ${{ jobs.check-if-version-incremented.outputs.new_version }}

jobs:
  check-if-version-incremented:
    name: "Check if version incremented"
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check_version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check if changes in src
        id: changed-src
        uses: tj-actions/changed-files@v37
        with: 
          files: ${{ inputs.source_dir }}

      - name: Extract branch name
        if: steps.changed-src.outputs.any_changed == 'true'
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Fetch previous commit
        if: steps.changed-src.outputs.any_changed == 'true' && steps.extract_branch.outputs.branch == inputs.main_branch
        run: |
          NUM_COMMITS=$(echo '${{ toJSON(github.event.commits) }}' | jq "length")
          PREV_COMMIT=$(git log --skip=$NUM_COMMITS --max-count=1 --pretty=format:"%H")
          git fetch origin $PREV_COMMIT:prev

      - name: Fetch main branch
        if: steps.changed-src.outputs.any_changed == 'true' && steps.extract_branch.outputs.branch != inputs.main_branch
        run: git fetch origin ${{ inputs.main_branch }}:prev

      - name: Check if version has incremented
        id: check_version
        if: steps.changed-src.outputs.any_changed == 'true'
        run: |
          NEW_VERSION=$(cat ${{ inputs.packagejson_dir }}/package.json | jq .version | tr -d '"')
           if git --no-pager cat-file blob prev:${{ inputs.packagejson_dir }}/package.json 2>/dev/null; then
            PREV_VERSION=$(git --no-pager cat-file blob prev:${{ inputs.packagejson_dir }}/package.json | jq .version | tr -d '"')
           else
            PREV_VERSION=0.0.0
          fi
          if dpkg --compare-versions $PREV_VERSION ge $NEW_VERSION; then
            echo "Version is unchanged, please update version in package.json"
            exit 1
          else
            echo "New version detected $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
